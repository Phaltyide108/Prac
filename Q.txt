def is_safe(board, row, col, n):
    # Check the left side of the current row
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on the left side
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, col, n):
    if col >= n:
        return True

    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1

            if solve_n_queens_util(board, col + 1, n):
                return True

            board[i][col] = 0

    return False

def solve_n_queens(n):
    board = [[0 for _ in range(n)] for _ in range(n)]
    board[0][0] = 1  # Place the first queen at the specified row and column

    if not solve_n_queens_util(board, 1, n):
        return None  # Solution doesn't exist

    return board

def print_board(board):
    if board is None:
        print("No solution exists")
    else:
        for row in board:
            print(" ".join(["Q" if col == 1 else "." for col in row]))

# Usage
n = 8  # Change n to the desired board size
first_queen_row = 0  # Row where the first queen is placed

board = solve_n_queens(n)
print_board(board)
